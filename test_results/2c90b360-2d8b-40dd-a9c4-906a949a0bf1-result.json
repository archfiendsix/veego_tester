{"name": "test_amazonMusic_music_mobile", "status": "failed", "statusDetails": {"message": "AssertionError: No running services detected", "trace": "self = <mobile_main.TelemetryTest testMethod=test_amazonMusic_music_mobile>\n\n    @pytest.mark.repeat(1)\n    @pytest.mark.sanity\n    def test_amazonMusic_music_mobile(self):\n        self.amazonMusic_mobile.run_amazonMusic_mobile(30)\n>       self.telemetry.run_telemetry_test('AmazonMusic', 'MUSIC', True, self.amazonMusic_mobile.interaction)\n\nmobile_main.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\telemetry.py:131: in run_telemetry_test\n    service_item = self.return_page_service_items(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.telemetry.Telemetry object at 0x000001DFFA6D3520>\nname = 'AmazonMusic', type = 'MUSIC', is_classification_final = True, mac = None\n\n    def return_page_service_items(self, name, type, is_classification_final, mac=None):\n        # Switch to telemetry Window\n        self.driver.switch_to.window(self.driver.window_handles[-1])\n        self.driver.refresh()\n        service_items = None\n    \n        body = self.driver.find_element(By.CSS_SELECTOR, \"body\")\n        body_text = body.text\n    \n        # try:\n        text_to_json = json.loads(body_text)\n        print(\"b\", body_text)\n        if not text_to_json:\n            # Handle the case where no running services are detected\n            print(\"No running services detected.\")\n            print(\"c\", body_text)\n            # Additional error handling or recovery logic\n        else:\n            text_to_json = json.loads(body_text)\n            print(\"d\", body_text)\n    \n        # except json.decoder.JSONDecodeError as e:\n        #     logging.error(f\"Failed to parse JSON data: {e}\")\n        #     return\n        print(\"e\", body_text)\n        if mac:\n            services = text_to_json[\"devices\"][0][\"discovery\"][\"devices\"][mac][\"services\"]\n        else:\n    \n            services = text_to_json[\"devices\"][0][\"discovery\"][\"devices\"][self.config_data[\"mac\"]][\"services\"]\n>       assert services, \"No running services detected\"\nE       AssertionError: No running services detected\n\npages\\telemetry.py:88: AssertionError"}, "attachments": [{"name": "log", "source": "95d36f9c-209b-4863-a0f8-d908af819809-attachment.txt", "type": "text/plain"}], "start": 1685867798209, "stop": 1685868088370, "uuid": "752d4a14-d7d2-4cb1-95b4-04309ce132fd", "historyId": "cbe01d2b748bf7284ea4ee4cb783f4c9", "testCaseId": "8994b5580440e92140c3b763c95527b4", "fullName": "mobile_main.TelemetryTest#test_amazonMusic_music_mobile", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "repeat(1)"}, {"name": "suite", "value": "mobile_main"}, {"name": "subSuite", "value": "TelemetryTest"}, {"name": "host", "value": "AmichaiM"}, {"name": "thread", "value": "8684-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "mobile_main"}]}